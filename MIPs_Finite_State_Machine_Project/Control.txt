/* 
 * The Control Module takes instruction memory output as input, and outputs control signals.

The InstrucionMemoryInput is a copy of an instruction sent from instruction memory.
RegDst, ALUsrc, MemtoReg, RegWrite, MemRead, MemWrite, Branch, Jump, and ALUOp are all control singals, singalling the activation or deactivation of various hardware.
*/
module Control(clock, InstructionMemoryInput, RegDst, ALUSrc, MemToReg, RegWrite, MemRead, MemWrite, Branch, Jump, ALUOp);

  //Control signal and varible initialization

  input clock;
  input [31:0] InstructionMemoryInput;
  output reg RegDst; 
  output reg ALUSrc; 
  output reg MemToReg; 
  output reg RegWrite; 
  output reg MemRead; 
  output reg MemWrite; 
  output reg Branch; 
  output reg Jump; 
  output reg [3:0] ALUOp; 
  
  // we pull out the opcode from the Instruction Memory input
  reg [5:0] OpCode;
  
  always @* begin
  OpCode[5:0] = InstructionMemoryInput[31:26];
  //Now we check the opCode for specific values, and assign control signals accordingly
  if(OpCode == 6'b000000) // R type
    begin
    RegDst = 1;
    ALUSrc = 0;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 0;
    ALUOp = 0000; // generic, will be overridden by ALU Control
    end
  else if(OpCode == 6'b011100) //R type - Special2 OpCode
    begin
    RegDst = 1;
    ALUSrc = 0;
    MemToReg = 0;
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 0;
    ALUOp = 0001;
    end
  else if(OpCode == 6'b000010) // J Type - Jump
    begin
    RegDst = 0; //(x)
    ALUSrc = 0; //(x)
    MemToReg = 0; //(x)
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 1;
    ALUOp = 0010; //Denotes an (x) value
    end
  else if(OpCode == 6'b000011) // J Type - Jump and Link
    begin
    RegDst = 0; //(x)
    ALUSrc = 0; //(x)
    MemToReg = 0; //(x)
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 1;
    ALUOp = 0011; //Denotes an (x) value
    
    end
  else if(OpCode == 6'b100011) // I Type - Load Word
    begin
    RegDst = 0; 
    ALUSrc = 1; 
    MemToReg = 1; 
    RegWrite = 1;
    MemRead = 1;
    MemWrite = 0;
    Branch = 0;
    Jump = 0;
    ALUOp = 0100;
    end  
  else if(OpCode == 6'b101011) // I Type - Store Word
    begin
    RegDst = 0; //(x)
    ALUSrc = 1; 
    MemToReg = 1; //(x)
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 1;
    Branch = 0;
    Jump = 0;
    ALUOp = 0101;
    end  
  else if(OpCode == 6'b000100) // I Type - Branch on Equal
    begin
    RegDst = 0; //(x) 
    ALUSrc = 0; 
    MemToReg = 0; //(x) 
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 1;
    Jump = 0;
    ALUOp = 0110;
    end   
  else if(OpCode == 6'b000101) // I Type - Branch not Equal
    begin
    RegDst = 0; //(x) 
    ALUSrc = 0; 
    MemToReg = 0; //(x) 
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 1;
    Jump = 0;
    ALUOp = 0111;
    end  
  else if(OpCode == 6'b000111) // I Type - Branch on Greater than Zero
    begin
    RegDst = 0; //(x) 
    ALUSrc = 0; 
    MemToReg = 0; //(x) 
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 1;
    Jump = 0;
    ALUOp = 1000;
    end 
  else if(OpCode == 6'b000110) // I Type - Branch on Less than or Equal to Zero
    begin
    RegDst = 0; //(x) 
    ALUSrc = 0; 
    MemToReg = 0; //(x) 
    RegWrite = 0;
    MemRead = 0;
    MemWrite = 0;
    Branch = 1;
    Jump = 0;
    ALUOp = 1001;
    end    
  else if(OpCode == 6'b001000) // I Type - Add Immediate
    begin
    RegDst = 0; 
    ALUSrc = 1; 
    MemToReg = 0; 
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 0;
    ALUOp = 1010;
    end
  else if(OpCode == 6'b001001) // I Type - Add Immediate Unsigned
    begin
    RegDst = 0; 
    ALUSrc = 1; 
    MemToReg = 0; 
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 0;
    ALUOp = 1011;
    end 
  else  // I Type - Generic
    begin
    RegDst = 0; 
    ALUSrc = 1; 
    MemToReg = 0; 
    RegWrite = 1;
    MemRead = 0;
    MemWrite = 0;
    Branch = 0;
    Jump = 0;
    ALUOp = 1100;
    end    
  end
endmodule